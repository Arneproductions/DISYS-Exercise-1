---
swagger: "2.0"
info:
  description: "Mandatory exercse 1"
  version: "1.0.0"
  title: "Mandatory exercise 1"
host: "itu.swagger.dk"
basePath: "/v1"
schemes:
- "https"
- "http"
paths:
  /user:
    get:
      tags:
      - "user"
      summary: "Get list of users"
      parameters: []
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "User created"
          schema:
            $ref: "#/definitions/User"
  /user/{id}:
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "user that need to be updated"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Deleted user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "user that need to be deleted"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  /workload:
    post:
      tags:
      - "workload"
      summary: "Create workload"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Workload"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
  /workload/{course}/{student}:
    get:
      tags:
      - "workload"
      summary: "Create workload"
      parameters:
      - name: "course"
        in: "path"
        description: "Id of the course the workload is associated with"
        required: true
        type: "integer"
        x-exportParamName: "Course"
      - name: "student"
        in: "path"
        description: "Id of the student the workload is associated with"
        required: true
        type: "integer"
        x-exportParamName: "Student"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/StudentWorkload"
  /satisfaction:
    post:
      tags:
      - "satisfaction"
      summary: "Submit satisfaction"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StudentSatisfaction"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
  /satisfaction/course/{course}:
    get:
      tags:
      - "satisfaction"
      summary: "Get satisfaction for a course"
      parameters:
      - name: "course"
        in: "path"
        description: "Id of the course the satisfaction is associated with"
        required: true
        type: "integer"
        x-exportParamName: "Course"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/StudentWorkload"
  /satisfaction/student/{student}:
    get:
      tags:
      - "satisfaction"
      summary: "Get satisfaction for a student"
      parameters:
      - name: "student"
        in: "path"
        description: "Id of the student the satisfaction is associated with"
        required: true
        type: "integer"
        x-exportParamName: "Student"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/StudentWorkload"
  /course:
    get:
      tags:
      - "Course"
      summary: "Gets all courses"
      description: ""
      operationId: "getCourses"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "A list of all cources"
          schema:
            $ref: "#/definitions/ArrayOfCourses"
    post:
      tags:
      - "Course"
      summary: "Creates new course"
      description: ""
      operationId: "addCourse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Representation of a course object to be created"
        required: true
        schema:
          $ref: "#/definitions/Course"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            type: "integer"
            format: "int64"
            description: "Returns Id of created course"
  /course/{courseId}/addStudent:
    put:
      tags:
      - "Course"
      summary: "Add students to a specific course"
      description: "Adds students to the course. If the student is already added then\
        \ it wont be added as a duplicate."
      operationId: "addStudentsToCourse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        description: "courseId"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "CourseId"
      - in: "body"
        name: "body"
        description: "Identifiers of students to be added to the course"
        required: true
        schema:
          type: "object"
          properties:
            studentId:
              type: "integer"
              format: "int64"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The student is added to the course"
  /course/{courseId}/student/{studentId}:
    delete:
      tags:
      - "Course"
      summary: "Removes student from the course"
      description: ""
      operationId: "removeStudentFromCourse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "CourseId"
      - name: "studentId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      responses:
        "200":
          description: "Course deleted"
  /course/{courseId}:
    delete:
      tags:
      - "Course"
      summary: "Deletes a course"
      description: ""
      operationId: "deleteCourse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "CourseId"
      responses:
        "200":
          description: "Course deleted"
definitions:
  User:
    type: "object"
    required:
    - "mail"
    - "name"
    - "role"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Karl"
      mail:
        type: "string"
        example: "karl@itu.dk"
      popularity:
        type: "integer"
        format: "int64"
      role:
        type: "string"
        enum:
        - "teacher"
        - "student"
    example:
      role: "teacher"
      mail: "karl@itu.dk"
      popularity: 6
      name: "Karl"
      id: 0
  Workload:
    properties:
      course_id:
        type: "integer"
        format: "int64"
      type:
        type: "string"
        enum:
        - "Assignment"
        - "Exercise"
        - "Reading"
  StudentWorkload:
    properties:
      workload_id:
        type: "integer"
        format: "int64"
      student_id:
        type: "integer"
        format: "int64"
      completion:
        type: "integer"
        format: "int64"
    example:
      completion: 1
      student_id: 6
      workload_id: 0
  StudentSatisfaction:
    properties:
      course_id:
        type: "integer"
        format: "int64"
      student_id:
        type: "integer"
        format: "int64"
      satisfaction:
        type: "integer"
        format: "int64"
  Course:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      teacher:
        type: "integer"
        format: "int64"
      students:
        type: "array"
        items:
          type: "integer"
          format: "int64"
    example:
      teacher: 6
      name: "name"
      description: "description"
      students:
      - 1
      - 1
      id: 0
  ArrayOfCourses:
    type: "array"
    items:
      $ref: "#/definitions/Course"
  ArrayOfIds:
    xml:
      name: "Course"
    type: "array"
    items:
      type: "integer"
      format: "int64"
